# 硬解
hwdec=auto   

## 指定应使用的硬件视频解码API，默认值 no 为软解。大多数时候都建议软解，问题少
#no/auto/auto-safe/yes/auto-copy/vaapi
#hwdec=no

#尝试使用硬解的格式(默认h264,vc1,hevc,vp8,vp9,AV1；all是特殊值指全部格式)

# 尽可能所有格式先尝试硬解
#hwdec-codecs=all    

#解码/渲染设置
#开启gpu渲染
##profile=gpu-hq    #旧版mpv中是 gpu-hq#，当前只是简单的重定向到high-quality

#profile=high-quality
vo=gpu-next
#gpu-next或gpu其中gpu最高普适性和完成度更稳定

gpu-context=winvk
##d3d11/d3d11va-copy/angle/vaapi/vaapi-copy/nvdec/nvdec-copy/vulkan/vulkan-copy/dxva2/dxva2-copy/cuda/cuda-copy
##mediacodec安卓/mediacodec-copy/waylandvk/x11vk/x11egl/x11/wayland/waylandegl/winvk
#如果切换 #windows下 winvk,d3d11
#linux下 gpu-context=x11vk 或 gpu-context=x11egl，gpu-context=waylandvk 或 gpu-context=waylandegl
#好像使用waylandvk无法启动，使用vulkan可以
###推荐直接使用--gpu-context而不是--gpu-api来指定，因为同个 gpu-api 下可以存在多个 gpu-context
##默认的gpu-context=d3d11通常是最高效的选项

######默认 auto（此项的值与 --gpu-api=<opengl|d3d11|vulkan> 相对应）
###gpu-api=auto    #gpu-api=vulkan # vulkan, opengl, d3d11#
#使用Vulkan则为vulkan-device=     ,使用d3d11,d3d11-adapter=
gpu-api=vulkan
#vulkan-device="NVIDIA GeForce GTX 1050 Ti"
#vulkan-device="Intel(R) UHD Graphics 630"

##gpu-api=opengl

#gpu-api=d3d11      
#（win默认api）
#d3d11-adapter=AMD
#d3d11-adapter="Intel(R) UHD Graphics 630"
#d3d11-adapter="NVIDIA GeForce GTX 1050 Ti"
#d3d11va零拷贝模式，可降低gpu 3D engine占用
#d3d11va-zero-copy=yes
# 是否直接解码到显存
#vd-lavc-dr=auto     
## <默认auto|yes|no> 是否直接解码到显存
##个别低端英特尔处理器可能需要显式禁用此功能以大幅提速解码

##停止屏幕保护程序
stop-screensaver=yes    

#缓存设置
#开启缓存
cache=yes
#最大向后缓存大小（KiB或MiB）
demuxer-max-bytes=256MiB
#用内存而不是磁盘缓存
cache-on-disk=no
#缓存时间
cache-secs=10

#退出时记住播放状态（包括是否暂停、音量、播放速度、位置等）
save-position-on-quit=yes        
###倾向不单独使用它
#播放状态保存位置
watch-later-directory=D:/Open/mpv/directory
#不记录是否暂停（除了pause同理可写fullscreen,mute,speed,ontop等参数）
watch-later-options-remove=pause
#或watch-later-options=vid,aid,sid# 退出时记住播放状态（包括是否暂停、音量、播放速度、位置等）
#  播放完毕后不自动退出
keep-open=yes

############
#画面画质设置#
#############
#mpv 默认不对视频进行色彩管理。即使你没有使用校色仪对屏幕进行过校色。
# 开启色彩管理
#icc-profile-auto=yes          
#中未校色屏建议使用target
#icc-profile =  
# 此选项用于加载指定的ICC，与前项不共存。默认为空，例值 "X:/xxx/xxxx.icm"
#icc-3dlut-size=256x256x256
# 默认64x64x64。会稍微延缓mpv启动


target-prim =auto          
# 不与 --icc-* 一起使用当不使用ICC时，视频颜色将适应此颜色空间
###auto/bt.709/bt.2020/bt.470m/bt.601-525/bt.601-625/adobe/dci-p3/v-gamut/s-gamut/cie1931/prophoto
target-trc =auto          
# 不与 --icc-* 一起使用当不使用ICC时，使用指定的传输特性。一般显示器使用值 gamma2.2
##auto/gamma2.2/srgb/gamma1.8/gamma2.8/bt.1886/linear/prophoto/pq/hlg/v-log/s-log1/s-log2
##target-gamut=             
###限制输出的色域
# 例如99%的argb屏幕写adobe。90%+的p3色域屏写 display-p3 （标准srgb屏无需更改此默认值）
#色彩管理
# 存储icc缓存以加速二次启动
icc-cache = yes      
# 是否在本地存储ICC配置文件的3dlut缓存，默认 yes
icc-cache-dir="~~/cache/icc"
# 存储着色器缓存以加速二次启动
gpu-shader-cache= yes    
#是否在本地存储GLSL着色器的编译缓存，可以提高启动性能，默认 yes
gpu-shader-cache-dir="~~/cache/shader"

# 是否开启色深抖动弥补色彩转换损失。8位显示器写8，10位显示器写10。
dither-depth=8       
### <no/auto/6/8/10> 是否开启色深抖动弥补色彩转换损失
# 色深抖动的算法（默认fruit|ordered|error-diffusion|no）
dither=fruit
# <默认fruit|ordered|error-diffusion|no> 色深抖动的算法
#值 no 等效--dither-depth=no# 误差扩散非常好但没必要，它基于计算着色器需要不低的性能开销，感知弱
fbo-format=auto    
# <最高为rgba32f> 内处理精度。
##此项通常由 --gpu-api 或 --gpu-context 自动决定正确值，默认 auto 优先选择16位及以上的精度
##off/auto/rgb8/rgb10/rgb16/rgb16f/rgb32f/rgba12/rgba16/rgba16f/rgba32f



 

#读取杜比视界元数据(需要将vo=gpu改为实验性的vo=gpu-next)
#vf-append=format=dolbyvision=yes     
##读取包含胶片颗粒元数据
##vf-append=format=film-grain=yes

# 设置GAMMA修正符合SRGB标准
#vf-append=format=gamma=gamma2.2
##开启上面的会导致HDR转SDR发灰

#vf-append=format=colorlevels=full      
##limited有限，full完全

#vf-append=format=primaries=bt.709     
##开启上面的会导致HDR转SDR发灰  
##与target-prim的值一样##BT.709即Rec.709是 SDR所使用的标准，BT.2020是HDR色域所使用的标准
##目前绝大部分显示器都支持BT709 的色彩空间，部分屏幕支持HDR
##色彩空间bt.709/bt.2020/bt.2020-cl/bt.2020-ncl/bt.601

#vf-append=format=colormatrix=bt.709
##开启上面的会导致HDR转SDR发灰
#color space##色彩空间##bt.709/bt.601/bt.2020-ncl/bt.2020-cl/mpte-240m
##color range##色域##limited #限制/full #完全



##⇘⇘滤镜部分
##设定随MPV启动的音/视频滤镜的书写格式（支持多项）
## --af/vf=滤镜①=参数❶=值:参数❷=值,滤镜②...
## --af 和 --vf 仅能各存在一条。如果不想只使用这条参数，可以拆开写
##例如使用 --vf-append 或--vf-toggle单项多次追加更多的滤镜，并不会覆盖 --vf 指定的滤镜
##⇘⇘滤镜部分
##设定随MPV启动的音/视频滤镜的书写格式（支持多项） --af/vf=滤镜①=参数❶=值:参数❷=值,滤镜②...
## --af 和 --vf 仅能各存在一条。如果不想只使用这条参数，可以拆开写，例如使用 --vf-append 单项多次追加更多的滤镜，并不会覆盖 --vf 指定的滤镜
##更多实用向的滤镜可参考 https://github.com/hooke007/MPV_lazy/discussions/120

 # vf        = vflip
 # vf-append = hflip
 # vf-append = format=rotate=90

#视频调整4:3或16:9,一般视频有问题才用
#video-aspect-override=4:3
#video-aspect-override=16:9

# 色度还原算法，可由更好的 "KrigBilateral.glsl" 着色器取代。默认 bilinear
#cscale=spline36  色度还原算法。若不设定，则自动采用 --scale 的值
cscale=spline64
#低配:bilinear;低配锐利:lanczos;中配（profile=gpu-hq时默认）:spline36;
##高配：ewa_lanczos;高配锐利:ewa_lanczossharp
# 放大算法，默认值 lanczos （追求最快算法可用 bilinear ）
scale=spline64
## 缩小算法。默认值 hermite 。若设为空值，则自动采用 --scale 的值
dscale=spline64 
 #半径可以用 scale-radius 来控制。增加半径会使filter更锐利但会增加更多的振铃,抗振铃,##必须是介于 0.0 和 1.0 之间的浮点数，0表示禁用
scale-antiring=0      
cscale-antiring=0       
dscale-antiring=0
tscale-antiring=0
correct-downscaling=no      
#缩小时使用可用于削弱部分算法缩小处理时产生的锯齿
linear-downscaling=no        
#在缩小时进行线性处理可以提升颜色对比度的精确性,在使用SSimDownscaler时关闭
sigmoid-upscaling=no       
#放大时色彩转换，不与linear-downscaling=yes一起使用，建议使用sigmoid

##⇘⇘备选的软件缩放方案
##在mpv内部需要执行格式转换时会用到软件缩放器
#sws-allow-zimg = yes              
# 优先使用zimg（通常具有更高质量）而不是libswscale，默认 yes
# sws-scaler= bicublin        # [libswscale] <fast-bilinear|bilinear|bicubic默认|x|point|area|bicublin|gauss|sinc|lanczos|spline>
# [libswscale] 缩放算法（同时作用于色度平面）
#sws-fast = yes             
# [libswscale] 以质量为代价优化性能，默认 no
#zimg-scaler-chroma= lanczos         
# [zimg] <point|bilinear默认|bicubic|spline16|spline36|lanczos>
#zimg-scaler= lanczos         
# [zimg] 缩放算法，可用值参考 --zimg-scaler-chroma（默认 lanczos）
#zimg-dither= error-diffusion 
# [zimg] <no|ordered|random默认|error-diffusion> 色深抖动算法
#zimg-fast= no              
# [zimg] 以质量为代价优化性能，默认 yes


##去色带
#deband=yes          
# 去色带，默认 no。可能受硬解码影响实际效果
#deband-threshold=44     
##去带阈值，数字越高强度越大但图像细节减少，默认48，<0..4096>,
#deband-iterations=2      
##去色带执行次数，越高约费力大于4无效
#deband-range=14        
#初始半径deband-iterations增大要减小这个
#deband-grain=28       
###去色带动态噪点，掩盖伪影


##各项特点##
#bilinear #双线性硬件纹理过滤（最快，质量很低）。这是使用 fast 配置时的默认设置。
##lanczos #Lanczos缩放。提供了质量和性能之间的良好平衡。
##这是 --scale 的默认设置。可以使用 --scale-radius 来控制采样点的数量，但最好不要更改它。
##ewa_lanczos #椭圆加权平均的Lanczos缩放。也被称为  Jinc。相对较慢，但质量非常好。
# ewa_hanning 相比其他 jinc 算法可减少振铃的产生
##ewa_lanczossharp #ewa_lanczos的一个略锐利的版本，这是使用 high-quality 配置时的默认设置。
##ewa_lanczos4sharpest #非常锐利的缩放器，但比 ewa_lanczossharp 稍慢。
##容易出现边缘振铃效应，因此建议将其与一个抗振铃着色器结合使用。在 --vo=gpu-next 中，设置此filter将启用内置的抗振铃，因此无需额外操作。
##mitchell #Mitchell-Netravali。 B 和 C 参数可以用 --scale-param1 和 --scale-param2 来设置
##hermite #Hermite样条。类似于 bicubic ，但将 B 设置为 0.0 。
##这个滤镜具有半径1.0的特殊特性，因此与其它filter相比非常快，但容易出现阻塞效应。这是 --dscale 的默认设置。
##catmull_rom #Catmull-Rom。与 mitchell 类似的三次filter，其中 B 和 C 参数分别为 0.0 和 0.5 。
##这个filter比 mitchell 更锐利，但会产生更多的振铃。
##bicubic变体中推荐catmull_rom
##bilinear/bicubic/gaussian/lanczos/ewa_lanczos/ewa_lanczossharp/ewa_lanczos4sharpest/spline36/robidoux/robidouxsharp



#着色器
##⇘⇘着色器部分
##此处的 --glsl-shaders 用于指定每次随MPV共同启动的着色器（支持多项）。
##--glsl-shaders-append 等效 --glsl-shader （注意和上行中参数的区别），表示追加着色器（单次仅能追加一项）
##并不会覆盖第一条 --glsl-shaders 指定的着色器，可无限追加该命令。
##初始加载多个着色器的示例写法
##glsl-shaders = "~~/shaders/hooks_01.glsl;~~/shaders/hooks_02.glsl;~~/shaders/hooks_03.glsl"
##下接的逐个单项 --glsl-shaders-append （或 --glsl-shader ） 
##会依次排列在 --glsl-shaders 之后，当然你也可以不写 --glsl-shaders 只用前二者选项的队列
##glsl-shaders-append  = "~~/shaders/KrigBilateral.glsl"
##glsl-shaders-append  = "~~/shaders/SSimSuperRes.glsl"
#glsl-shaders-append="X:/xxxxx/你的MPV文件夹/portable_config/shaders/xxx.glsl" #常规写法
#glsl-shaders-append="~~/shaders/xxx.glsl" #简便写法，绝对路径，其中 `~~/` 等效 `~~home/` 
#着色器处理顺序，预处理： 所有 luma、 chroma 变体，后处理： 所有 yuv、 rgb 变体，最后混合
##chroma色度通道，luma亮度通道

##去色带hdeband.glsl，使用时要deband=no        
##色度升频着色器启用将覆盖 --cscale=xxxxx 算法，JointBilateral.glsl，KrigBilateral.glsl，CfL_Prediction系列
glsl-shaders="~~/shaders/CfL_Prediction" 
#glsl-shaders-append="~~/shaders/hdeband.glsl"            
#glsl-shaders-append="~~/shaders/LumaSharpen.glsl"        
##锐化unsharp.glsl，minblur_usm.glsl，LumaSharpen.glsl，adaptive_sharpen.glsl  
glsl-shaders-append="~~/shaders/PixelClipper.glsl"           
##抗振铃着色器，适用于内置放大算法的后处理抗振铃
glsl-shaders-append="~~/shaders/SSimSuperRes.glsl"            
##放大算法进行增强校正
glsl-shaders-append="~~/shaders/SSimDownscaler.glsl"           
##缩小算法进行增强校正



 #######
 # OSD #
 #######

##⇘⇘OSD 即 On-Screen-Display ，通常为屏幕上弹出显示的信息。 OSC 即 on-screen-controller ，MPV中指的是简易操控界面
##更多自定义查询 https://mpv.io/manual/master/#osd

 osd-on-seek              = bar         # <no|默认bar|msg|msg-bar> 在跳转时间轴时显示的信息类型（全局）
 osd-duration             = 3000        # 设置（全局）OSD文本信息的持续时间（毫秒），默认 1000
 osd-font                 = "sans-serif"
                                        # OSD 字体，默认 sans-serif
 osd-font-size            = 55          # 更改OSD字体大小（全局，影响多个功能显示的文本），默认 55
 osd-playing-msg          =
                                        # 每个文件开始播放时短暂显示的信息。默认为空，例值（显示文件名） "${filename}"
 osd-playing-msg-duration = 0           # --osd-playing-msg 文本的持续时间，默认（0）即使用全局OSD文本持续时间
 osd-bar-align-y          = 0.5         # <-1-1> bar 的垂直位置，默认 0.5
 osd-bar-w                = 75          # <1-100> bar 的宽度，以画面的百分比为单位，默认 75
 osd-bar-h                = 3.125       # <0.1-50> bar 的高度，以画面的百分比为单位，默认 3.125
 osd-blur                 = 0           # <0-20.0> 高斯模糊系数，默认 0
 osd-border-color         = "#FF000000" # <格式为(AA)RRGGBB> OSD 边框颜色
 osd-border-size          = 3           # OSD 边框尺寸，默认 3
 osd-color                = "#FFFFFFFF" # <格式为(AA)RRGGBB> OSD 颜色
 osd-fractions            = no          # 以秒为单位显示OSD时间（毫秒精度），有助于查看视频帧的确切时间戳，默认 no



#关闭简易控制面板On Screen Controller(osc)
osc=yes
#osc= yes    
# [使用部分同类脚本的前置条件(no)] 禁用原OSC以兼容第三方的界面样式，默认 yes
load-auto-profiles = yes    
# <yes|no|默认auto> 新版条件配置预设（使用旧版外挂的用户记得禁用）
#load-osd-console= yes     
# 控制台，默认 yes
#load-stats-overlay=yes   
# 统计信息，默认 yes



#无边框
#no-border
# 窗口自由拉伸（no）还是按比例拉伸（默认 yes）
#keepaspect-window=yes         
# <默认yes|no> 是否执行HIDPI缩放
#hidpi-window-scale=yes        
##（推荐禁用，原因是会影响 --window-scale 的数值）禁用了mpv的DPI缩放让stats上面显示正常但对高分屏有影响
#设置默认打开的窗口大小为1280x720
geometry=1280x720
##启动时暂停
#pause=no
##如果你希望 mpv 启动后直接进入全屏模式：
##fs=yes
#将窗口缩放窗口模式下至大、至小占屏幕的百分比
autofit-smaller=40%x40%
autofit-larger=100%x100%          
# 如果窗口大于屏幕的W%xH%，则调整窗口大小
#cursor-autohide-fs-only         
# 只在全屏模式隐藏鼠标
cursor-autohide=3000             
# 3秒后自动隐藏鼠标


#视频/音频/字幕/截图设置
#视频同步#启用 interpolation 来消除帧率问题造成的卡顿
interpolation=yes
tscale=oversample
#### 默认插值算法为 oversample。总体而言 mitchell 更平滑，但会有模糊。triangle 介于两者之间，catmull_rom 相对锐利  
#插补[仅当 --interpolation=yes 时生效] 时间插值算法（帧混合）
video-sync=audio      
##Video sync #video-sync=display-resample#视频同步
##audio/off/desync/display-vdrop/display-desync/display-resample/display-resample-vdrop/display-resample-desync
###有些时候会造成掉帧bug，display-resample 启用时启用
#video-sync-max-video-change = 1                 # [仅当 --video-sync=display-xxxx 时生效] 默认 1   
##应用与视频的最大速度差百分比，默认1，用5来启用它，display-resample 启用时启用
#video-sync-max-audio-change=0.125        
###默认0.125
# 修复音画同步
hr-seek-framedrop=yes     
#变速播放时的音调修正
audio-pitch-correction=yes
#丢帧模式
##帧丢弃no/vo/decoder/decoder+vo  ##选decoder会丢帧严重
framedrop=vo     

##VapourSynth即VS是开源的非线性处理的视频帧服务插件，使用Python作为脚本语言,不同版本与不同版本python版本对应，以滤镜形式插入到视频播放流程中。
##使用时要关闭上面的补帧，效果不错。使用时要安装VapourSynth，如果使用绿色版要直接解压到mpv主文件夹
#将要用的补帧插件（如libmvtools.dll）放入VapourSynth安装或绿色版VapourSynth64文件夹下的plugins文件夹内，然后使用下面的方式插入对应的滤镜脚本vpy文件
#vf-append=vapoursynth="~~/vs/mvtools.vpy"



#声音#
#启动默认音量
volume=70
#程序最大音量[100,1000]
volume-max=100
# 指定音频输出驱动程序的优先级列表。win10优先使用wasapi，其它可用的有openal和sdl 
ao=wasapi    
#音频输出驱动是连接不同音频输出设施的接口。其语法是ao=<driver1,driver2,...[,]>指定一个要使用的音频输出驱动的优先级列表。
##在linux中ao=alsa （Linux独占）或ao=pulse ，#pulse-latency-hacks=yes 修复问题（在使用PulseAudio的系统上是首选）
##ao=pipewire （pipewire 正在取代PulseAudio）# coreaudio (Mac OS)
# 此项用于指定启动时的音频输出设备，默认 auto
audio-device=auto     
## 音频通道独占（如果有其他软件先独占音频通道后，再打开MPV可能会画面会卡顿），默认 no
audio-exclusive=no     
#默认 auto-safe # 特殊值 stereo 强制多声道音源下混为双声道输出（避免可能的7.1/5.1→2.0声音丢失和音量过小）
audio-channels=stereo
##音频标准化下混合
audio-normalize-downmix=yes     


#设置将字幕渲染到视频源分辨率并随视频一起缩放并进行色彩管理
##这样可以保证字幕的分辨率与画面始终一致，并保证字幕中“屏幕字”的颜色与画面一致：
blend-subtitles=video
#加载视频文件的外部字幕文件方式。（fuzzy 加载含有视频文件名的全部字幕文件）fuzzy:模糊的，exact:准确的，all：全部
sub-auto=fuzzy
# 在指定的额外目录中寻找匹配的字幕。支持相对和绝对路径，默认为空
sub-file-paths=
#加载含有视频文件名的音频文件
audio-file-auto=fuzzy
#字体大小，默认55，此值是以高度为720的屏幕为比例，更大或更小的屏幕会缩放
sub-font-size=60
sub-font-provider= auto
# <默认auto|none|fontconfig> 字幕字体提供程序。默认 auto 将根据系统选择不同的字体提供程序。
#未指定样式的字幕字体
# 指定纯文本字幕的默认字体，默认 sans-serif ，例值 "LXGW WenKai"
sub-font="NotoSans-Regular"
# 设定纯文本字幕的背景色
sub-back-color="#00000000"
#未指定样式的字幕边框
sub-border-size=2
sub-ass-override= yes 
# <no|默认 yes|scale|force|strip> 是否覆盖字幕脚本的原始样式，默认只应用 --sub-ass-* 类的选项
#强制外挂ass字幕可使用黑边
sub-ass-force-margins=yes
sub-ass-scale-with-window = no          
# 字幕随窗口缩放而不是随视频缩放，默认 no
#指定优先使用音轨（优先级按序递减）
alang=zh,chi,chs,sc,zho,en,eng,jp,jap,kor,ko
# 音轨配置
audio-file-auto=fuzzy
#指定优先使用字幕轨（DVD使用ISO 639-1两位语言代码，MKV、MPEG-TS使用ISO 639-2 三位语言代码）
slang=zh,chi,chs,sc,zho,en,eng,jp,jap,kor,ko
#列表播放循环方式，循环写inf否则写no
loop-playlist=inf

##⇘⇘模拟vsfilter相关
##默认情况下libass和vsfilter渲染的字幕存在部分差异，以下选项可用于使视觉效果相近（模仿vsfilter）
sub-ass-vsfilter-aspect-compat = yes         # 播放非常规比例视频时拉伸ASS字幕，默认 yes
sub-ass-vsfilter-blur-compat   = yes         # 通过视频分辨率而不是.ass指定的分辨率缩放"\blur"标签，默认 yes
sub-ass-vsfilter-color-compat  = basic       # <默认basic|full|force-601|no> 字幕色彩空间处理





#截屏文件格式（可选：png、ppm、pgm、pgmyuv、tga、jpg、jpeg）
screenshot-format=png
#截屏文件保存路径
screenshot-directory=E:/picture

# （0-100） JPEG的质量，默认 90
#screenshot-jpeg-quality=90
# 用与源视频相同的色度半采样写入JPEG，默认 yes
#screenshot-jpeg-source-chroma=yes
# （0-9） PNG压缩等级，过高的等级影响性能，默认 7
#screenshot-png-compression=7
# （0-5） PNG的压缩过滤器。默认值 5 即可实现最佳压缩率
#screenshot-png-filter=5
# 是否使用无损WEBP，默认 no
#screenshot-webp-lossless=no
# （0-100） 当 creenshot-webp-lossless=no 时生效有损WEBP的质量，默认 75
#screenshot-webp-quality=75
# （0-6） WEBP压缩等级，使用有损WEBP时进一步降低图片质量，默认 4
#screenshot-webp-compression=4
# （0-15） JXL的视觉模型距离，0为质量无损，0.1为视觉无损，默认值 1 相当于JPEG的90质量
#screenshot-jxl-distance=1
# （1-9） JXL压缩等级，过高的等级影响性能，默认 3
#screenshot-jxl-effort=3
# 使用适当的色彩空间标记屏幕截图（并非所有格式受支持）默认 no
#screenshot-tag-colorspace=no
# 主要影响PNG/JXL，尽可能使用和视频输出时近似的位深，默认 yes
#screenshot-high-bit-depth=yes





#设置ua，对于一些流媒体可能比较好一点
user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0"


###脚本，键位###
input-builtin-bindings=yes      
# 是否使用mpv初始的快捷键（禁用则只使用 input.conf 中的设定），默认 yes
#input-conf=   
# 使用另外指定的文件作为默认的快捷键方案。默认为空，例值 "~~/input_easy.conf"

#input-default-bindings = yes    
# 类似上一项，但也涉及mpv脚本中预设的弱绑定键位，默认 yes
# <inf|默认no> 是否循环播放当前文件
loop=no    
# <inf|force|默认no> 播放列表循环。值 force 会强制播放列表中标记为失效的条目而不是跳过它 
loop-playlist=no    
##内置脚本开关（如果没有必要的目的，那就不要屏蔽mpv内建的功能）
# 网址解析增强，默认 yes  ##需要安装ytdl 或ytdp文件，win下直接放mpv主文件下
ytdl = yes     
#ytdl-raw-options-append =
#[当 --ytdl=yes 时有效] 将自定义的选项传递给ytdl，默认为空 https://github.com/ytdl-org/youtube-dl#options
#示例（ cookies-from-browser=firefox ）仅为传递单个选项，多个选项最好独立追加，即写多个 --ytdl-raw-options-append 参数
# 自动挂载 /scripts/ 目录中的所有外置脚本，默认 yes。
load-scripts= yes           
#scripts = "~~/scripts/xxxxx.lua;~~/scripts/yyyyy.lua"#上面设置为no时可用示例的命令加载指定的外置脚本
#输出日志
log-file = "D:/Open/mpv/portable_config/log.txt"

# 有些设置可以不在主配置文件设置而是通过外置的conf文件，附属设置文件
use-filedir-conf = yes
include = "~~/profiles.conf"
# 该参数用于追加读取额外的设置文件，默认为空。例值（原配置预设组已被分离到该文件中） "~~/profiles.conf"        
#include = "~~/script-opts.conf"



